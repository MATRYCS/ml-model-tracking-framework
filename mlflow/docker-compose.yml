version: '3.7'

services:

  db:
    image: postgres:13
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--data-checksums --encoding=UTF-8
    volumes:
      - ${MLFLOW_DBDATA_VOLUME:-mlflow-dbdata}:/var/lib/postgresql/data

  # MinIO is Amazon S3 compliant self-hosted substitute
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      # default MinIO port
      - "9000:9000"
      # MinIO Console is available at http://localhost:9001
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 1s
      timeout: 10s
      retries: 5
    volumes:
      - ${MLFLOW_BUCKETS_VOLUME:-mlflow-buckets}:/data:consistent
    # Note there is no bucket by default
    command: server /data --address ":9000" --console-address ":9001"

  # This service ensure that bucket exists
  minio-create-bucket:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
      - MINIO_BUCKET_NAME=${AWS_BUCKET_NAME}
    entrypoint: >
      bash -c "
        mc alias set minio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} &&
        if ! mc ls minio | grep --quiet $${MINIO_BUCKET_NAME}; then
          mc mb minio/$${MINIO_BUCKET_NAME}
        else
          echo 'bucket already exists'
        fi
      "

  # The MLFlow service
  mlflow-tracking-server:
    build:
      dockerfile: Dockerfile.mlflow
      context: .
    restart: unless-stopped
    depends_on:
      - db
      - minio
    ports:
      # MLflow UI is available at http://localhost:5000
      - "5000:5000"
    environment:
      # Access to backend database for logging experiments
      - MLFLOW_TRACKING_URI=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      # Tell MLFlow to substitute S3 endpoint with custom endpoint, local Minio in our case
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      # Credentials to access AWS/Minio
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
    command: >
      bash -c "
        mlflow server \
        --host 0.0.0.0 \
        --port 5000 \
        --backend-store-uri $${MLFLOW_TRACKING_URI} \
        --artifacts-destination s3://$${AWS_BUCKET_NAME} \
        --serve-artifacts \
        --gunicorn-opts '--timeout 180 --log-level info'
      "

  keycloak-reverse-proxy:
    build:
      dockerfile: Dockerfile.keycloak
      context: .
    restart: unless-stopped
    depends_on:
      - mlflow-tracking-server
    ports:
      - 80:80
    environment:
      - KEYCLOAK_SERVER=${KEYCLOAK_SERVER}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}

volumes:
  mlflow-dbdata:
  mlflow-buckets:
